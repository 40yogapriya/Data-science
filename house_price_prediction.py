# -*- coding: utf-8 -*-
"""House_Price_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UcHvoJWYVLwP3IDbCKwMfH8IKKwxTnUN
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df=pd.read_csv("/data.csv")
df

df.head()

from google.colab import drive
drive.mount('/content/drive')

df.info()

df.isnull().sum()

df.nunique()

df.describe()

numeric_df = df.select_dtypes(include='number')
Data = numeric_df.corr()
plt.figure(figsize=(10,8))
sns.heatmap(Data,annot=True,cmap='coolwarm')
plt.title("correlation")
plt.show()

df=pd.read_csv("/content/drive/MyDrive/csv/data.csv")
plt.figure(figsize=(10,8))
sns.barplot(x=df['street'], y=df['price'])
plt.title("Correlation")
plt.show()

numeric_df = df.select_dtypes(include=np.number)
correlation_matrix = numeric_df.corr()
plt.figure(figsize=(10,8))
plt.scatter(x=correlation_matrix.index, y=correlation_matrix['price'], marker='*',color = 'blue')
plt.title("Scatter Plot For CSV Data")
plt.show()

numeric_df = df.select_dtypes(include=np.number)
correlation_matrix = numeric_df.corr()
plt.figure(figsize=(10,8))
sns.barplot(x=correlation_matrix.index, y=correlation_matrix['price'])
plt.title("Correlation")
plt.show()

numeric_df = df.select_dtypes(include=np.number)
plt.figure(figsize=(10,8))
sns.histplot(df['price'],kde = True ,color = 'blue')
plt.title("Histogram Plot For CSV Data")
plt.show()

df.columns

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df=pd.read_csv("/content/drive/MyDrive/csv/data.csv")
Col_to_remove=['date','yr_renovated', 'street', 'city',
       'statezip', 'country']
df= df.drop(columns =Col_to_remove)

df.columns

df.head()

import scipy.stats as stats
Z_score = stats.zscore(df)
threshold = 3
print("Size before removing the outliers:",  df.shape)
Outliers=df[(Z_score>threshold).any(axis=1)]
df=df[(Z_score <= threshold).all(axis=1)]
print("Size after remove the outliers:" , df.shape)

Outliers.head()

import pandas as pd
from sklearn.preprocessing import StandardScaler
Scaler = StandardScaler()
Scaler.fit(df)
df_scaled=pd.DataFrame(Scaler.transform(df), columns=df.columns)

df_scaled

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

X = df.drop('price',axis=1)
Y = df['price']
X_train,X_test,Y_train,Y_test =train_test_split(X,Y,test_size = 0.25,random_state = 42)

print(f"Xtrain {X_train.shape}")
print(f"Xtest {X_test.shape}")

print(f"Ytrain {Y_train.shape}")
print(f"Ytest {Y_test.shape}")

Models = [('Random Forest',RandomForestRegressor()),
('Linear Regression',LinearRegression()),
('Decision Tree',DecisionTreeRegressor()),
('KNN',KNeighborsRegressor())]

from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

for name, Model in Models:
    print(name)
    print()
    Model.fit(X_train, Y_train)
    Y_pred = Model.predict(X_test)
    print("Mean Squared Error(MSE):", mean_squared_error(Y_test, Y_pred))
    print("\n")
    print("Mean Absolute Error(MAE):", mean_absolute_error(Y_test, Y_pred))
    print("\n")
    print("R Squared(R2):", r2_score(Y_test, Y_pred))
    print("\n")